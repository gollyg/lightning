diff --git a/.codeclimate.yml b/.codeclimate.yml
new file mode 100644
index 0000000..fe129b4
--- /dev/null
+++ b/.codeclimate.yml
@@ -0,0 +1,21 @@
+---
+engines:
+  phpmd:
+    enabled: true
+    config:
+      file_extensions: "php,inc,module,install"
+      rulesets: ".phpmd.xml"
+  phpcodesniffer:
+    enabled: true
+    config:
+      file_extensions: "php,inc,module,install"
+      encoding: utf-8
+      standard: "Drupal"
+      ignore_warnings: true
+ratings:
+  paths:
+  - "**.php"
+  - "**.inc"
+  - "**.module"
+  - "**.install"
+exclude_paths:
diff --git a/.phpmd.xml b/.phpmd.xml
new file mode 100644
index 0000000..c1a66cf
--- /dev/null
+++ b/.phpmd.xml
@@ -0,0 +1,78 @@
+<?xml version="1.0"?>
+<ruleset xmlns="http://pmd.sourceforge.net/ruleset/2.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="PMD Ruleset for Drupal" xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
+  <description>
+    A PMD Ruleset for Drupal coding standards.
+  </description>
+
+  <!--
+    Include each rule explicitly so we know what we have.
+    @see https://github.com/phpmd/phpmd/blob/master/src/main/resources/rulesets/
+  -->
+
+  <!-- Clean Code -->
+  <!--
+  These don't align with Drupal standards, so they are excluded.
+  @todo Static calls are hard to test and extend, is there a way to whitelist the ones that are OK?
+  <rule ref="rulesets/cleancode.xml/BooleanArgumentFlag"/>
+  <rule ref="rulesets/cleancode.xml/ElseExpression"/>
+  <rule ref="rulesets/cleancode.xml/StaticAccess"/>
+  -->
+
+  <!-- Code Size -->
+  <rule ref="rulesets/codesize.xml/CyclomaticComplexity"/>
+  <rule ref="rulesets/codesize.xml/NPathComplexity"/>
+  <rule ref="rulesets/codesize.xml/ExcessiveMethodLength"/>
+  <rule ref="rulesets/codesize.xml/ExcessiveClassLength"/>
+  <rule ref="rulesets/codesize.xml/ExcessiveParameterList"/>
+  <rule ref="rulesets/codesize.xml/ExcessivePublicCount"/>
+  <rule ref="rulesets/codesize.xml/TooManyFields"/>
+
+  <!-- Controversial -->
+  <rule ref="rulesets/controversial.xml/Superglobals"/>
+  <!--
+  These checks do not need to be included since PHPCS will check for style.
+  <rule ref="rulesets/controversial.xml/CamelCaseClassName"/>
+  <rule ref="rulesets/controversial.xml/CamelCasePropertyName"/>
+  <rule ref="rulesets/controversial.xml/CamelCaseMethodName"/>
+  <rule ref="rulesets/controversial.xml/CamelCaseParameterName"/>
+  <rule ref="rulesets/controversial.xml/CamelCaseVariableName"/>
+  -->
+
+  <!-- Design -->
+  <rule ref="rulesets/design.xml/ExitExpression"/>
+  <rule ref="rulesets/design.xml/EvalExpression"/>
+  <rule ref="rulesets/design.xml/GotoStatement"/>
+  <rule ref="rulesets/design.xml/NumberOfChildren"/>
+  <rule ref="rulesets/design.xml/DepthOfInheritance"/>
+  <rule ref="rulesets/design.xml/CouplingBetweenObjects"/>
+  <rule ref="rulesets/design.xml/DevelopmentCodeFragment"/>
+
+  <!-- Naming -->
+  <rule ref="rulesets/naming.xml/ShortVariable">
+    <properties>
+      <!-- Allow $id as a variable name. -->
+      <property name="exceptions" description="Comma-separated list of exceptions" value="id"/>
+    </properties>
+  </rule>
+  <rule ref="rulesets/naming.xml/LongVariable">
+    <properties>
+      <!-- Bump variable length to a more reasonable number. -->
+      <property name="maximum" description="The variable length reporting threshold" value="35"/>
+    </properties>
+  </rule>
+  <rule ref="rulesets/naming.xml/ShortMethodName"/>
+  <rule ref="rulesets/naming.xml/ConstructorWithNameAsEnclosingClass"/>
+  <rule ref="rulesets/naming.xml/ConstantNamingConventions"/>
+  <rule ref="rulesets/naming.xml/BooleanGetMethodName"/>
+
+  <!-- Unused Code -->
+  <rule ref="rulesets/unusedcode.xml/UnusedPrivateField"/>
+  <rule ref="rulesets/unusedcode.xml/UnusedLocalVariable"/>
+  <rule ref="rulesets/unusedcode.xml/UnusedPrivateMethod"/>
+  <!--
+  Hooks often have unused parameters, so ignore this warning.
+  @todo is there a way to allow unused parameters in hooks but not elsewhere?
+  <rule ref="rulesets/unusedcode.xml/UnusedFormalParameter"/>
+  -->
+
+</ruleset>
diff --git a/.travis.yml b/.travis.yml
index bf4503a..0ad1e9f 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -12,8 +12,6 @@ env:
   - MAKE_FILE=drupal-8.2.x.make.yml
 
 matrix:
-  allow_failures:
-    - env: MAKE_FILE=drupal-8.2.x.make.yml
   fast_finish: true
 
 services:
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..127999c
--- /dev/null
+++ b/README.md
@@ -0,0 +1,8 @@
+[![Build Status](https://travis-ci.org/timmillwood/drupal-workspace.svg?branch=8.x-1.x)](https://travis-ci.org/timmillwood/drupal-workspace) [![Code Climate](https://codeclimate.com/github/timmillwood/drupal-workspace/badges/gpa.svg)](https://codeclimate.com/github/timmillwood/drupal-workspace)
+
+
+
+Workspace
+=========
+
+Provides the ability to have multiple workspaces on a single site to facilitate things like full-site preview and content staging.
diff --git a/src/Controller/RevisionController.php b/src/Controller/RevisionController.php
index 8c9d006..d5e75c4 100644
--- a/src/Controller/RevisionController.php
+++ b/src/Controller/RevisionController.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\workspace\Controller\RevisionController.
- */
-
 namespace Drupal\workspace\Controller;
 
 use Drupal\Core\Controller\ControllerBase;
diff --git a/src/Controller/RevisionsController.php b/src/Controller/RevisionsController.php
index 683482b..e609bf3 100644
--- a/src/Controller/RevisionsController.php
+++ b/src/Controller/RevisionsController.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\workspace\Controller\RevisionsController.
- */
-
 namespace Drupal\workspace\Controller;
 
 use Drupal\Core\Controller\ControllerBase;
diff --git a/src/Element/Rev.php b/src/Element/Rev.php
index e1708a5..63a2886 100644
--- a/src/Element/Rev.php
+++ b/src/Element/Rev.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\workspace\Element\Rev.
- */
-
 namespace Drupal\workspace\Element;
 
 use Drupal\Core\Render\Element\RenderElement;
diff --git a/src/Entity/Form/WorkspaceForm.php b/src/Entity/Form/WorkspaceForm.php
index e1541ef..929a487 100644
--- a/src/Entity/Form/WorkspaceForm.php
+++ b/src/Entity/Form/WorkspaceForm.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\workspace\Entity\Form\WorkspaceForm.
- */
-
 namespace Drupal\workspace\Entity\Form;
 
 use Drupal\Core\Entity\ContentEntityForm;
@@ -91,7 +86,7 @@ class WorkspaceForm extends ContentEntityForm {
     $insert = $workspace->isNew();
     $workspace->save();
     $info = ['%info' => $workspace->label()];
-    $context = array('@type' => $workspace->bundle(), $info);
+    $context = array('@type' => $workspace->bundle(), '%info' => $workspace->label());
     $logger = $this->logger('workspace');
 
     if ($insert) {
diff --git a/src/Entity/Form/WorkspaceTypeDeleteForm.php b/src/Entity/Form/WorkspaceTypeDeleteForm.php
index b9025bc..74b0080 100644
--- a/src/Entity/Form/WorkspaceTypeDeleteForm.php
+++ b/src/Entity/Form/WorkspaceTypeDeleteForm.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\workspace\Entity\Form\WorkspaceTypeDeleteForm.
- */
-
 namespace Drupal\workspace\Entity\Form;
 
 use Drupal\Core\Entity\EntityDeleteForm;
diff --git a/src/Entity/Form/WorkspaceTypeForm.php b/src/Entity/Form/WorkspaceTypeForm.php
index b3e2f6b..5cd2234 100644
--- a/src/Entity/Form/WorkspaceTypeForm.php
+++ b/src/Entity/Form/WorkspaceTypeForm.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\workspace\Entity\Form\WorkspaceTypeForm.
- */
-
 namespace Drupal\workspace\Entity\Form;
 
 use Drupal\Core\Entity\BundleEntityFormBase;
diff --git a/src/Entity/Replication.php b/src/Entity/Replication.php
index 62d69ec..ea8c037 100644
--- a/src/Entity/Replication.php
+++ b/src/Entity/Replication.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\workspace\Entity\Replication.
- */
-
 namespace Drupal\workspace\Entity;
 
 use Drupal\Core\Entity\ContentEntityInterface;
diff --git a/src/Entity/WorkspacePointerViewsData.php b/src/Entity/WorkspacePointerViewsData.php
index 5f8438f..bb2258e 100644
--- a/src/Entity/WorkspacePointerViewsData.php
+++ b/src/Entity/WorkspacePointerViewsData.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\workspace\Entity\WorkspacePointer.
- */
-
 namespace Drupal\workspace\Entity;
 
 use Drupal\views\EntityViewsData;
diff --git a/src/EntityTypeInfo.php b/src/EntityTypeInfo.php
index 6e0c0b6..0f38520 100644
--- a/src/EntityTypeInfo.php
+++ b/src/EntityTypeInfo.php
@@ -165,6 +165,27 @@ class EntityTypeInfo {
       ])
       ->setDisplayConfigurable('form', TRUE);
 
+    $fields['pull_replication_settings'] = BaseFieldDefinition::create('entity_reference')
+      ->setLabel(t('Replication settings on update'))
+      ->setDescription(t('The settings to use when content is pulled from upstream.'))
+      ->setRevisionable(TRUE)
+      ->setSetting('target_type', 'replication_settings')
+      ->setDisplayOptions('form', [
+        'type' => 'options_select',
+        'weight' => 1
+      ]);
+
+    $fields['push_replication_settings'] = BaseFieldDefinition::create('entity_reference')
+      ->setLabel(t('Replication settings on deploy'))
+      ->setDescription(t('The settings to use when content is pushed to upstream.'))
+      ->setRevisionable(TRUE)
+      ->setSetting('target_type', 'replication_settings')
+      ->setDisplayOptions('form', [
+        'type' => 'options_select',
+        'weight' => 2
+      ]);
+
     return $fields;
   }
+
 }
diff --git a/src/EventSubscriber/WorkbenchModerationSubscriber.php b/src/EventSubscriber/WorkbenchModerationSubscriber.php
index 9c05bad..603b44a 100644
--- a/src/EventSubscriber/WorkbenchModerationSubscriber.php
+++ b/src/EventSubscriber/WorkbenchModerationSubscriber.php
@@ -4,11 +4,9 @@ namespace Drupal\workspace\EventSubscriber;
 
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\multiversion\Entity\WorkspaceInterface;
-use Drupal\workbench_moderation\Entity\ModerationState;
 use Drupal\workbench_moderation\Event\WorkbenchModerationEvents;
 use Drupal\workbench_moderation\Event\WorkbenchModerationTransitionEvent;
 use Drupal\workspace\ReplicatorManager;
-use Drupal\workspace\WorkspacePointerInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
 /**
@@ -17,15 +15,27 @@ use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 class WorkbenchModerationSubscriber implements EventSubscriberInterface {
 
   /**
+   * The entity type manager to use for checking moderation information.
+   *
    * @var \Drupal\Core\Entity\EntityTypeManagerInterface
    */
   protected $entityTypeManager;
 
   /**
+   * The replicator manager to trigger replication on.
+   *
    * @var \Drupal\workspace\ReplicatorManager
    */
   protected $replicatorManager;
 
+  /**
+   * Inject dependencies.
+   *
+   * @param EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager to use for checking moderation information.
+   * @param ReplicatorManager $replicator_manager
+   *   The replicator manager to trigger replication on.
+   */
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ReplicatorManager $replicator_manager) {
     $this->entityTypeManager = $entity_type_manager;
     $this->replicatorManager = $replicator_manager;
@@ -56,7 +66,7 @@ class WorkbenchModerationSubscriber implements EventSubscriberInterface {
    *   TRUE if the event is moving an entity to a default-revision state.
    */
   protected function wasDefaultRevision(WorkbenchModerationTransitionEvent $event) {
-    /** @var ModerationState $post_state */
+    /** @var Drupal\workbench_moderation\Entity\ModerationState $post_state */
     $post_state = $this->entityTypeManager->getStorage('moderation_state')->load($event->getStateAfter());
 
     return $post_state->isPublishedState();
@@ -70,7 +80,7 @@ class WorkbenchModerationSubscriber implements EventSubscriberInterface {
    */
   protected function mergeWorkspaceToParent(WorkspaceInterface $workspace) {
     // This may be insufficient for handling a missing parent.
-    /** @var WorkspacePointerInterface $parent_workspace */
+    /** @var \Drupal\workspace\WorkspacePointerInterface $parent_workspace */
     $parent_workspace_pointer = $workspace->get('upstream')->entity;
     if (!$parent_workspace_pointer) {
       // @todo Should we silently ignore this, or throw an error, or...?
@@ -79,8 +89,10 @@ class WorkbenchModerationSubscriber implements EventSubscriberInterface {
 
     $source_pointer = $this->getPointerToWorkspace($workspace);
 
-    // @todo pass a ReplicationTask to replicate()
-    $this->replicatorManager->replicate($source_pointer, $parent_workspace_pointer);
+    // Derive a replication task from the Workspace we are acting on.
+    $task = $this->replicatorManager->getTask($workspace, 'push_replication_settings');
+
+    $this->replicatorManager->replicate($source_pointer, $parent_workspace_pointer, $task);
   }
 
   /**
@@ -94,7 +106,8 @@ class WorkbenchModerationSubscriber implements EventSubscriberInterface {
    *
    * @param \Drupal\multiversion\Entity\WorkspaceInterface $workspace
    *   The workspace for which we want a pointer.
-   * @return WorkspacePointerInterface
+   *
+   * @return \Drupal\workspace\WorkspacePointerInterface
    *   The pointer to the provided workspace.
    */
   protected function getPointerToWorkspace(WorkspaceInterface $workspace) {
@@ -108,11 +121,12 @@ class WorkbenchModerationSubscriber implements EventSubscriberInterface {
   /**
    * {@inheritdoc}
    */
-  static function getSubscribedEvents() {
+  public static function getSubscribedEvents() {
     $events = [];
     if (class_exists(WorkbenchModerationEvents::class)) {
       $events[WorkbenchModerationEvents::STATE_TRANSITION][] = ['onTransition'];
     }
     return $events;
   }
+
 }
diff --git a/src/Form/UpdateForm.php b/src/Form/UpdateForm.php
index bfcb9c4..df7035d 100644
--- a/src/Form/UpdateForm.php
+++ b/src/Form/UpdateForm.php
@@ -5,23 +5,91 @@ namespace Drupal\workspace\Form;
 use Drupal\Core\Ajax\AjaxResponse;
 use Drupal\Core\Ajax\CloseModalDialogCommand;
 use Drupal\Core\Ajax\PrependCommand;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\ConfirmFormBase;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Url;
+use Drupal\multiversion\Workspace\WorkspaceManagerInterface;
 use Drupal\replication\Entity\ReplicationLogInterface;
+use Drupal\workspace\ReplicatorInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
 
+/**
+ * The form to update the current workspace with its upstream.
+ */
 class UpdateForm extends ConfirmFormBase {
 
   /**
+   * The workspace manager.
+   *
+   * @var \Drupal\multiversion\Workspace\WorkspaceManagerInterface
+   */
+  protected $workspaceManager;
+
+  /**
+   * The entity type manager.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
+  /**
+   * The replicator manager.
+   *
+   * @var \Drupal\workspace\ReplicatorInterface
+   */
+  protected $replicatorManager;
+
+  /**
+   * The renderer service.
+   *
+   * @var \Drupal\Core\Render\RendererInterface
+   */
+  protected $renderer;
+
+  /**
+   * Inject services needed by the form.
+   *
+   * @param \Drupal\multiversion\Workspace\WorkspaceManagerInterface $workspace_manager
+   *   The workspace manager.
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager.
+   * @param \Drupal\workspace\ReplicatorInterface $replicator_manager
+   *   The replicator manager.
+   * @param \Drupal\Core\Render\RendererInterface $renderer
+   *   The renderer service.
+   */
+  public function __construct(WorkspaceManagerInterface $workspace_manager, EntityTypeManagerInterface $entity_type_manager, ReplicatorInterface $replicator_manager, RendererInterface $renderer) {
+    $this->workspaceManager = $workspace_manager;
+    $this->entityTypeManager = $entity_type_manager;
+    $this->replicatorManager = $replicator_manager;
+    $this->renderer = $renderer;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('workspace.manager'),
+      $container->get('entity_type.manager'),
+      $container->get('workspace.replicator_manager'),
+      $container->get('renderer')
+    );
+  }
+
+  /**
    * Get the current active workspace's pointer.
    *
    * @return \Drupal\workspace\WorkspacePointerInterface
+   *   The active workspace.
    */
   protected function getActive() {
     /** @var \Drupal\multiversion\Entity\WorkspaceInterface $workspace */
-    $workspace = \Drupal::service('workspace.manager')->getActiveWorkspace();
+    $workspace = $this->workspaceManager->getActiveWorkspace();
     /** @var \Drupal\workspace\WorkspacePointerInterface[] $pointers */
-    $pointers = \Drupal::service('entity_type.manager')
+    $pointers = $this->entityTypeManager
       ->getStorage('workspace_pointer')
       ->loadByProperties(['workspace_pointer' => $workspace->id()]);
     return reset($pointers);
@@ -31,9 +99,10 @@ class UpdateForm extends ConfirmFormBase {
    * Returns the upstream for the given workspace.
    *
    * @return \Drupal\multiversion\Entity\WorkspaceInterface
+   *   The upstream workspace.
    */
   protected function getUpstream() {
-    $workspace = \Drupal::service('workspace.manager')->getActiveWorkspace();
+    $workspace = $this->workspaceManager->getActiveWorkspace();
     if (isset($workspace->upstream)) {
       return $workspace->upstream->entity;
     }
@@ -89,10 +158,10 @@ class UpdateForm extends ConfirmFormBase {
     $upstream = $this->getUpstream();
     $active = $this->getActive();
     try {
-      $response = \Drupal::service('workspace.replicator_manager')->update(
-        $upstream,
-        $active
-      );
+      // Derive a replication task from the Workspace we are acting on.
+      $task = $this->replicatorManager->getTask($active->getWorkspace(), 'pull_replication_settings');
+
+      $response = $this->replicatorManager->update($upstream, $active, $task);
 
       if (($response instanceof ReplicationLogInterface) && $response->get('ok')) {
         drupal_set_message($this->t('%workspace has been updated with content from %upstream.', ['%upstream' => $upstream->label(), '%workspace' => $active->label()]));
@@ -101,22 +170,28 @@ class UpdateForm extends ConfirmFormBase {
         drupal_set_message($this->t('Error updating %workspace from %upstream.', ['%upstream' => $upstream->label(), '%workspace' => $active->label()]), 'error');
       }
     }
-    catch(\Exception $e) {
+    catch (\Exception $e) {
       watchdog_exception('Workspace', $e);
       drupal_set_message($e->getMessage(), 'error');
     }
   }
 
   /**
+   * Callback handler for the update form button.
+   *
    * @param array $form
+   *   The form array.
    * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The form state data.
+   *
    * @return \Drupal\Core\Ajax\AjaxResponse
+   *   The AJAX response.
    */
   public function update(array $form, FormStateInterface $form_state) {
     $response = new AjaxResponse();
     $response->addCommand(new CloseModalDialogCommand());
     $status_messages = ['#type' => 'status_messages'];
-    $response->addCommand(new PrependCommand('.region-highlighted', \Drupal::service('renderer')->renderRoot($status_messages)));
+    $response->addCommand(new PrependCommand('.region-highlighted', $this->renderer->renderRoot($status_messages)));
     return $response;
   }
 
@@ -129,4 +204,5 @@ class UpdateForm extends ConfirmFormBase {
     }
     return $this->t('Do you want to pull changes from %upstream to %workspace?', ['%upstream' => $this->getUpstream()->label(), '%workspace' => $this->getActive()->label()]);
   }
+
 }
diff --git a/src/Form/WorkspaceActivateForm.php b/src/Form/WorkspaceActivateForm.php
index f92fa10..3dd9f20 100644
--- a/src/Form/WorkspaceActivateForm.php
+++ b/src/Form/WorkspaceActivateForm.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\workspace\Form\WorkspaceActivateForm.
- */
-
 namespace Drupal\workspace\Form;
 
 use Drupal\Core\Form\FormStateInterface;
diff --git a/src/Form/WorkspaceActivateFormBase.php b/src/Form/WorkspaceActivateFormBase.php
index 0cdf494..caa5cec 100644
--- a/src/Form/WorkspaceActivateFormBase.php
+++ b/src/Form/WorkspaceActivateFormBase.php
@@ -1,8 +1,4 @@
 <?php
-/**
- * @file
- * Contains \Drupal\workspace\Form\WorkspaceActivateFormBase.
- */
 
 namespace Drupal\workspace\Form;
 
diff --git a/src/Form/WorkspaceSwitcherForm.php b/src/Form/WorkspaceSwitcherForm.php
index 43e5c1b..5065896 100644
--- a/src/Form/WorkspaceSwitcherForm.php
+++ b/src/Form/WorkspaceSwitcherForm.php
@@ -1,8 +1,4 @@
 <?php
-/**
- * @file
- * Contains \Drupal\workspace\Form\WorkspaceSwitcherForm.
- */
 
 namespace Drupal\workspace\Form;
 
diff --git a/src/ParamConverter/EntityRevisionConverter.php b/src/ParamConverter/EntityRevisionConverter.php
index 4b2f324..b118a0f 100644
--- a/src/ParamConverter/EntityRevisionConverter.php
+++ b/src/ParamConverter/EntityRevisionConverter.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains Drupal\workspace\ParamConverter\EntityRevisionConverter.
- */
-
 namespace Drupal\workspace\ParamConverter;
 
 use Drupal\Core\Entity\EntityInterface;
diff --git a/src/Plugin/Derivative/RevisionsContextual.php b/src/Plugin/Derivative/RevisionsContextual.php
index e0e16fa..16bb7ac 100644
--- a/src/Plugin/Derivative/RevisionsContextual.php
+++ b/src/Plugin/Derivative/RevisionsContextual.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\workspace\Plugin\Derivative\RevisionsContextual.
- */
-
 namespace Drupal\workspace\Plugin\Derivative;
 
 use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
diff --git a/src/Plugin/Derivative/RevisionsLocalTask.php b/src/Plugin/Derivative/RevisionsLocalTask.php
index c3e1ce0..b2f635e 100644
--- a/src/Plugin/Derivative/RevisionsLocalTask.php
+++ b/src/Plugin/Derivative/RevisionsLocalTask.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\workspace\Plugin\Derivative\RevisionsLocalTask.
- */
-
 namespace Drupal\workspace\Plugin\Derivative;
 
 use Drupal\Component\Plugin\Derivative\DeriverBase;
diff --git a/src/Plugin/RulesAction/ReplicateContent.php b/src/Plugin/RulesAction/ReplicateContent.php
index 5384af0..8431b49 100644
--- a/src/Plugin/RulesAction/ReplicateContent.php
+++ b/src/Plugin/RulesAction/ReplicateContent.php
@@ -1,22 +1,15 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\workspace\Plugin\RulesAction\ReplicateContent.
- */
-
 namespace Drupal\workspace\Plugin\RulesAction;
 
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
-use Drupal\multiversion\Entity\Workspace;
 use Drupal\multiversion\Entity\WorkspaceInterface;
 use Drupal\multiversion\MultiversionManagerInterface;
 use Drupal\multiversion\Workspace\WorkspaceManagerInterface;
 use Drupal\rules\Core\RulesActionBase;
 use Drupal\workspace\ReplicatorManager;
-use Drupal\workspace\WorkspacePointerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
@@ -85,27 +78,30 @@ class ReplicateContent extends RulesActionBase implements ContainerFactoryPlugin
       $container->get('multiversion.manager')
       );
   }
+
   /**
    * Replicate content from active Workspace to it's upstream.
    */
   protected function doExecute(EntityInterface $entity) {
-    /** @var Workspace $workspace */
+    /** @var \Drupal\multiversion\Entity\Workspace $workspace */
     $workspace = $this->multiversionManager->isSupportedEntityType($entity->getEntityType())
       ? $entity->get('workspace')->entity
       : $this->workspaceManager->getActiveWorkspace();
 
     $source = $this->getPointerToWorkspace($workspace);
 
-    /** @var WorkspacePointerInterface $upstream */
-    $target = $workspace->get('upstream')->entity;
+    /** @var \Drupal\workspace\WorkspacePointerInterface $upstream */
+    $upstream = $workspace->get('upstream')->entity;
+
+    // Derive a replication task from the source Workspace.
+    $task = $this->replicatorManager->getTask($workspace, 'push_replication_settings');
 
-    // @todo pass a ReplicationTask to replicate(), but where would it come from?
     /** @var \Drupal\replication\Entity\ReplicationLogInterface $result */
-    $result = $this->replicatorManager->replicate($source, $target);
+    $result = $this->replicatorManager->replicate($source, $upstream, $task);
 
     if ($result->get('ok') == TRUE) {
-      drupal_set_message($this->t('Content replicated from workspace @source to workspace @target.',
-        ['@source' => $workspace->label(), '@target' => $upstream->label()]));
+      drupal_set_message($this->t('Content replicated from workspace @source to workspace @upstream.',
+        ['@source' => $workspace->label(), '@upstream' => $upstream->label()]));
     }
     else {
       drupal_set_message($this->t('Error replicating content.'));
@@ -121,7 +117,8 @@ class ReplicateContent extends RulesActionBase implements ContainerFactoryPlugin
    *
    * @param \Drupal\multiversion\Entity\WorkspaceInterface $workspace
    *   The workspace for which we want a pointer.
-   * @return WorkspacePointerInterface
+   *
+   * @return \Drupal\workspace\WorkspacePointerInterface
    *   The pointer to the provided workspace.
    */
   protected function getPointerToWorkspace(WorkspaceInterface $workspace) {
diff --git a/src/ReplicatorManager.php b/src/ReplicatorManager.php
index 7020719..15f5c1b 100644
--- a/src/ReplicatorManager.php
+++ b/src/ReplicatorManager.php
@@ -2,9 +2,13 @@
 
 namespace Drupal\workspace;
 
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Field\EntityReferenceFieldItemListInterface;
 use Drupal\multiversion\Workspace\ConflictTrackerInterface;
 use Drupal\replication\Entity\ReplicationLog;
+use Drupal\replication\ReplicationTask\ReplicationTask;
 use Drupal\replication\ReplicationTask\ReplicationTaskInterface;
+use Symfony\Component\Console\Exception\LogicException;
 
 /**
  * Provides the Replicator manager.
@@ -12,20 +16,24 @@ use Drupal\replication\ReplicationTask\ReplicationTaskInterface;
 class ReplicatorManager implements ReplicatorInterface {
 
   /**
+   * The services available to perform replication.
+   *
    * @var ReplicatorInterface[]
-   *   The services available to perform replication.
    */
   protected $replicators = [];
 
   /**
+   * The injected service to track conflicts during replication.
+   *
    * @var ConflictTrackerInterface
-   *   The injected service to track conflicts during replication.
    */
   protected $conflictTracker;
 
   /**
+   * The injected service to track conflicts during replication.
+   *
    * @param ConflictTrackerInterface $conflict_tracker
-   *   The injected service to track conflicts during replication.
+   *   The confict tracking service.
    */
   public function __construct(ConflictTrackerInterface $conflict_tracker) {
     $this->conflictTracker = $conflict_tracker;
@@ -52,19 +60,72 @@ class ReplicatorManager implements ReplicatorInterface {
    * {@inheritdoc}
    */
   public function replicate(WorkspacePointerInterface $source, WorkspacePointerInterface $target, ReplicationTaskInterface $task = NULL) {
-    // @todo Utilize the following unused variables when we build out the
-    // conflict logic, e.g. a workflow to resolve conflicts.
+    // @todo use $initial_conflicts in a conflict management workflow
     $initial_conflicts = $this->conflictTracker->getAll();
+
+    // Derive a pull replication task from the Workspace we are acting on.
+    $pull_task = $this->getTask($source->getWorkspace(), 'pull_replication_settings');
+
     // Pull in changes from $target to $source to ensure a merge will complete.
-    $pull = $this->update($target, $source);
+    $this->update($target, $source, $pull_task);
+
+    // @todo use $post_conflicts in a conflict management workflow
     $post_conflicts = $this->conflictTracker->getAll();
-    $push = $this->doReplication($source, $target, $task);
-    return $push;
+
+    // Automatically derive settings from the workspace if no task sent.
+    // @todo Refactor to eliminate obscurity of having an optional parameter
+    // and automatically setting the parameter's value.
+    if ($task === NULL) {
+      // Derive a push replication task from the Workspace we are acting on.
+      $task = $this->getTask($source->getWorkspace(), 'push_replication_settings');
+    }
+
+    // Push changes from $source to $target.
+    $push_log = $this->doReplication($source, $target, $task);
+
+    return $push_log;
+  }
+
+  /**
+   * Derives a replication task from an entity with replication settings.
+   *
+   * This can be used with a Workspace using the 'push_replication_settings'
+   * and 'pull_replication_settings' fields.
+   *
+   * @param \Drupal\Core\Entity\EntityInterface $entity
+   *   The entity to derive the replication task from.
+   * @param string $field_name
+   *   The field name that references a ReplicationSettings config entity.
+   *
+   * @return \Drupal\replication\ReplicationTask\ReplicationTaskInterface
+   *   A replication task that can be passed to a replicator.
+   *
+   * @throws \Symfony\Component\Console\Exception\LogicException
+   *   The replication settings field does not exist on the entity.
+   */
+  public function getTask(EntityInterface $entity, $field_name) {
+    $task = new ReplicationTask();
+    $items = $entity->get($field_name);
+
+    if (!$items instanceof EntityReferenceFieldItemListInterface) {
+      throw new LogicException('Replication settings field does not exist.');
+    }
+
+    $referenced_entities = $items->referencedEntities();
+    if (count($referenced_entities) > 0) {
+      $task->setFilter($referenced_entities[0]->getFilterId());
+      $task->setParameters($referenced_entities[0]->getParameters());
+    }
+
+    return $task;
   }
 
   /**
    * Update the target using the source before doing a replication.
    *
+   * This is used primarily as a public facing method by the UpdateForm. It
+   * avoids the additional logic found in the replicate method.
+   *
    * @param \Drupal\workspace\WorkspacePointerInterface $target
    *   The workspace to replicate to.
    * @param \Drupal\workspace\WorkspacePointerInterface $source
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
index 4c42b95..6b16a4e 100644
--- a/src/Routing/RouteSubscriber.php
+++ b/src/Routing/RouteSubscriber.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\workspace\Routing\RouteSubscriber.
- */
-
 namespace Drupal\workspace\Routing;
 
 use Drupal\Core\Entity\EntityManagerInterface;
diff --git a/src/WorkspaceListBuilder.php b/src/WorkspaceListBuilder.php
index 8b2aade..31a5a31 100644
--- a/src/WorkspaceListBuilder.php
+++ b/src/WorkspaceListBuilder.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\workspace\WorkspaceListBuilder.
- */
-
 namespace Drupal\workspace;
 
 use Drupal\Core\Entity\EntityInterface;
diff --git a/src/WorkspaceTypeListBuilder.php b/src/WorkspaceTypeListBuilder.php
index 65529e8..5da8dd9 100644
--- a/src/WorkspaceTypeListBuilder.php
+++ b/src/WorkspaceTypeListBuilder.php
@@ -1,8 +1,4 @@
 <?php
-/**
- * @file
- * Contains \Drupal\workspace\WorkspaceTypeListBuilder.
- */
 
 namespace Drupal\workspace;
 
diff --git a/tests/src/Functional/EntityTypeAlterTest.php b/tests/src/Functional/EntityTypeAlterTest.php
index 7144e08..25a0b6b 100644
--- a/tests/src/Functional/EntityTypeAlterTest.php
+++ b/tests/src/Functional/EntityTypeAlterTest.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\Tests\workspace\Functional\EntityTypeAlterTest.
- */
-
 namespace Drupal\Tests\workspace\Functional;
 
 use Drupal\Component\Utility\Unicode;
diff --git a/tests/src/Functional/ReplicationSettingsTest.php b/tests/src/Functional/ReplicationSettingsTest.php
new file mode 100644
index 0000000..c9417f8
--- /dev/null
+++ b/tests/src/Functional/ReplicationSettingsTest.php
@@ -0,0 +1,192 @@
+<?php
+
+namespace Drupal\Tests\workspace\Functional;
+
+use Drupal\simpletest\BlockCreationTrait;
+use Drupal\Tests\BrowserTestBase;
+
+/**
+ * Test replication settings on replicate.
+ *
+ * @group workspace
+ */
+class ReplicationSettingsTest extends BrowserTestBase {
+
+  use WorkspaceTestUtilities;
+
+  use BlockCreationTrait {
+    placeBlock as drupalPlaceBlock;
+  }
+
+  /**
+   * The replicator manager service used to trigger replication.
+   *
+   * @var \Drupal\workspace\ReplicatorManager
+   */
+  protected $replicatorManager;
+
+  /**
+   * {@inheritdoc}
+   */
+  public static $modules = [
+    'system',
+    'node',
+    'user',
+    'block',
+    'block_content',
+    'workspace',
+    'multiversion',
+    'entity_reference',
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() {
+    parent::setUp();
+
+    $this->replicatorManager = $this->container->get('workspace.replicator_manager');
+  }
+
+  /**
+   * Verify pull replication settings using the published filter as an example.
+   */
+  public function testPullReplicationSettings() {
+    $permissions = [
+      'create_workspace',
+      'edit_own_workspace',
+      'view_own_workspace',
+      'create test content',
+      'access content overview',
+      'administer content types',
+      'administer nodes',
+      'access content overview',
+    ];
+
+    $this->createNodeType('Test', 'test');
+    $this->setupWorkspaceSwitcherBlock();
+    $this->drupalPlaceBlock('local_actions_block', ['id' => 'actions_block']);
+    $test_user = $this->drupalCreateUser($permissions);
+    $this->drupalLogin($test_user);
+    $session = $this->getSession();
+
+    // Create a published node.
+    $this->drupalGet('/node/add/test');
+    $this->drupalPostForm(NULL, [
+      'title[0][value]' => 'Published node',
+    ], t('Save and publish'));
+    $page = $session->getPage();
+    $page->hasContent('Published node has been created');
+    $this->assertTrue($this->isLabelInContentOverview('Published node'));
+
+    // Create an unpublished node.
+    $this->drupalGet('/node/add/test');
+    $this->drupalPostForm(NULL, [
+      'title[0][value]' => 'Unpublished node',
+    ], t('Save as unpublished'));
+    $page = $session->getPage();
+    $page->hasContent('Unpublished node has been created');
+    $this->assertTrue($this->isLabelInContentOverview('Unpublished node'));
+
+    // Create a target workspace with replication settings.
+    $this->drupalGet('/admin/structure/workspace/add');
+    $session = $this->getSession();
+    $this->assertSession()->statusCodeEquals(200);
+    $page = $session->getPage();
+    $page->fillField('label', 'Target');
+    $page->fillField('machine_name', 'target');
+    $page->selectFieldOption('upstream', '1');
+    $page->selectFieldOption('edit-pull-replication-settings', 'published');
+    $page->findButton(t('Save'))->click();
+    $session->getPage()->hasContent("'Target (target)");
+
+    $live = $this->getOneEntityByLabel('workspace', 'Live');
+    $target = $this->getOneWorkspaceByLabel('Target');
+    $source_pointer = $this->getPointerToWorkspace($live);
+    $target_pointer = $this->getPointerToWorkspace($target);
+
+    // Derive a replication task from the target Workspace.
+    $task = $this->replicatorManager->getTask($target, 'pull_replication_settings');
+
+    // Replicate from Live to Target.
+    $this->replicatorManager->replicate($source_pointer, $target_pointer, $task);
+
+    // Verify the correct nodes were replicated.
+    $this->switchToWorkspace($target);
+    $this->assertTrue($this->isLabelInContentOverview('Published node'));
+    $this->assertFalse($this->isLabelInContentOverview('Unpublished node'));
+  }
+
+  /**
+   * Verify push replication settings using the published filter as an example.
+   */
+  public function testPushReplicationSettings() {
+    $permissions = [
+      'create_workspace',
+      'edit_own_workspace',
+      'view_own_workspace',
+      'create test content',
+      'access content overview',
+      'administer content types',
+      'administer nodes',
+      'access content overview',
+    ];
+
+    $this->createNodeType('Test', 'test');
+    $this->setupWorkspaceSwitcherBlock();
+    $this->drupalPlaceBlock('local_actions_block', ['id' => 'actions_block']);
+    $test_user = $this->drupalCreateUser($permissions);
+    $this->drupalLogin($test_user);
+    $session = $this->getSession();
+
+    // Create a target workspace with replication settings.
+    $this->drupalGet('/admin/structure/workspace/add');
+    $session = $this->getSession();
+    $this->assertSession()->statusCodeEquals(200);
+    $page = $session->getPage();
+    $page->fillField('label', 'Target');
+    $page->fillField('machine_name', 'target');
+    $page->selectFieldOption('upstream', '1');
+    $page->selectFieldOption('edit-push-replication-settings', 'published');
+    $page->findButton(t('Save'))->click();
+    $session->getPage()->hasContent("'Target (target)");
+
+    $live = $this->getOneEntityByLabel('workspace', 'Live');
+    $target = $this->getOneWorkspaceByLabel('Target');
+    $source_pointer = $this->getPointerToWorkspace($live);
+    $target_pointer = $this->getPointerToWorkspace($target);
+
+    // Switch to the target workspace.
+    $this->switchToWorkspace($target);
+
+    // Create a published node.
+    $this->drupalGet('/node/add/test');
+    $this->drupalPostForm(NULL, [
+      'title[0][value]' => 'Published node',
+    ], t('Save and publish'));
+    $page = $session->getPage();
+    $page->hasContent('Published node has been created');
+    $this->assertTrue($this->isLabelInContentOverview('Published node'));
+
+    // Create an unpublished node.
+    $this->drupalGet('/node/add/test');
+    $this->drupalPostForm(NULL, [
+      'title[0][value]' => 'Unpublished node',
+    ], t('Save as unpublished'));
+    $page = $session->getPage();
+    $page->hasContent('Unpublished node has been created');
+    $this->assertTrue($this->isLabelInContentOverview('Unpublished node'));
+
+    // Derive a replication task from the target Workspace.
+    $task = $this->replicatorManager->getTask($target, 'push_replication_settings');
+
+    // Replicate from Target to Live.
+    $this->replicatorManager->replicate($target_pointer, $source_pointer, $task);
+
+    // Verify the correct nodes were replicated.
+    $this->switchToWorkspace($live);
+    $this->assertTrue($this->isLabelInContentOverview('Published node'));
+    $this->assertFalse($this->isLabelInContentOverview('Unpublished node'));
+  }
+
+}
diff --git a/tests/src/Functional/ReplicatorTest.php b/tests/src/Functional/ReplicatorTest.php
index 3d4c47a..6fa7738 100644
--- a/tests/src/Functional/ReplicatorTest.php
+++ b/tests/src/Functional/ReplicatorTest.php
@@ -1,15 +1,7 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\Tests\workspace\Functional\ReplicatorTest.
- */
-
 namespace Drupal\Tests\workspace\Functional;
 
-use Drupal\Core\Entity\Entity\EntityFormDisplay;
-use Drupal\field\Entity\FieldConfig;
-use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\simpletest\BlockCreationTrait;
 use Drupal\simpletest\BrowserTestBase;
 use Drupal\taxonomy\Entity\Vocabulary;
@@ -21,11 +13,16 @@ use Drupal\workspace\ReplicatorManager;
  * @group workspace
  */
 class ReplicatorTest extends BrowserTestBase {
+
   use WorkspaceTestUtilities;
+
   use BlockCreationTrait {
     placeBlock as drupalPlaceBlock;
   }
 
+  /**
+   * {@inheritdoc}
+   */
   public static $modules = ['system', 'node', 'user', 'block', 'workspace', 'multiversion', 'taxonomy', 'entity_reference', 'field', 'field_ui', 'menu_link_content', 'menu_ui'];
 
   /**
diff --git a/tests/src/Functional/WorkspaceIndividualPermissionsTest.php b/tests/src/Functional/WorkspaceIndividualPermissionsTest.php
index 3a360a7..2bfc612 100644
--- a/tests/src/Functional/WorkspaceIndividualPermissionsTest.php
+++ b/tests/src/Functional/WorkspaceIndividualPermissionsTest.php
@@ -4,18 +4,22 @@ namespace Drupal\Tests\workspace\Functional;
 
 use Drupal\simpletest\BrowserTestBase;
 
-
 /**
  * Tests permission controls on workspaces.
  *
  * @group workspace
+ *
  * @runTestsInSeparateProcesses
- * @preserveGlobalState disabled
  *
+ * @preserveGlobalState disabled
  */
 class WorkspaceIndividualPermissionsTest extends BrowserTestBase {
+
   use WorkspaceTestUtilities;
 
+  /**
+   * {@inheritdoc}
+   */
   public static $modules = ['workspace', 'multiversion'];
 
   /**
@@ -27,6 +31,7 @@ class WorkspaceIndividualPermissionsTest extends BrowserTestBase {
       'administer site configuration',
       'create_workspace',
       'edit_own_workspace',
+      'view_own_workspace',
     ];
 
     $editor1 = $this->drupalCreateUser($permissions);
@@ -49,7 +54,6 @@ class WorkspaceIndividualPermissionsTest extends BrowserTestBase {
     $this->assertEquals(200, $session->getStatusCode());
   }
 
-
   /**
    * Verifies that a user can view a specific workspace.
    */
@@ -91,4 +95,5 @@ class WorkspaceIndividualPermissionsTest extends BrowserTestBase {
     $this->drupalGet("admin/structure/workspace/{$packers->id()}/activate");
     $this->assertEquals(403, $session->getStatusCode());
   }
+
 }
diff --git a/tests/src/Functional/WorkspaceSwitcherTest.php b/tests/src/Functional/WorkspaceSwitcherTest.php
index 5c7a2df..1f24891 100644
--- a/tests/src/Functional/WorkspaceSwitcherTest.php
+++ b/tests/src/Functional/WorkspaceSwitcherTest.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\Tests\workspace\Functional\WorkspaceSwitcherTest.
- */
-
 namespace Drupal\Tests\workspace\Functional;
 
 use Drupal\multiversion\Entity\Workspace;
diff --git a/tests/src/Functional/WorkspaceTest.php b/tests/src/Functional/WorkspaceTest.php
index fd7e7c8..d34f31e 100644
--- a/tests/src/Functional/WorkspaceTest.php
+++ b/tests/src/Functional/WorkspaceTest.php
@@ -1,10 +1,5 @@
 <?php
 
-/**
- * @file
- * Contains \Drupal\Tests\workspace\FunctionalWorkspaceTest.
- */
-
 namespace Drupal\Tests\workspace\Functional;
 
 use Drupal\simpletest\BrowserTestBase;
diff --git a/tests/src/Functional/WorkspaceTestUtilities.php b/tests/src/Functional/WorkspaceTestUtilities.php
index 713d8e5..a8539b0 100644
--- a/tests/src/Functional/WorkspaceTestUtilities.php
+++ b/tests/src/Functional/WorkspaceTestUtilities.php
@@ -1,9 +1,4 @@
 <?php
-/**
- * @file
- * Contains WorkspaceTestUtilities.php
- */
-
 
 namespace Drupal\Tests\workspace\Functional;
 
@@ -80,7 +75,7 @@ trait WorkspaceTestUtilities {
     $this->drupalGet('/admin/structure/workspace/add');
 
     $session = $this->getSession();
-    $this->assertEquals(200, $session->getStatusCode());
+    $this->assertSession()->statusCodeEquals(200);
 
     $page = $session->getPage();
     $page->fillField('label', $label);
@@ -164,7 +159,7 @@ trait WorkspaceTestUtilities {
     $this->drupalGet('/node/add/' . $bundle);
 
     $session = $this->getSession();
-    $this->assertEquals(200, $session->getStatusCode());
+    $this->assertSession()->statusCodeEquals(200);
 
     $page = $session->getPage();
     $page->fillField('Title', $label);
@@ -195,5 +190,18 @@ trait WorkspaceTestUtilities {
     return $pointer;
   }
 
+  /**
+   * Determine if the content list has an entity's label.
+   *
+   * This assertion can be used to validate a particular entity exists in the
+   * current workspace.
+   */
+  protected function isLabelInContentOverview($label) {
+    $this->drupalGet('/admin/content');
+    $session = $this->getSession();
+    $this->assertSession()->statusCodeEquals(200);
+    $page = $session->getPage();
+    return $page->hasContent($label);
+  }
 
 }
diff --git a/tests/src/Kernel/WorkspacePointerTest.php b/tests/src/Kernel/WorkspacePointerTest.php
index 3633c69..0fe48d8 100644
--- a/tests/src/Kernel/WorkspacePointerTest.php
+++ b/tests/src/Kernel/WorkspacePointerTest.php
@@ -2,7 +2,6 @@
 
 namespace Drupal\Tests\workspace\Kernel;
 
-
 use Drupal\multiversion\Entity\Workspace;
 use Drupal\multiversion\Entity\WorkspaceInterface;
 use Drupal\multiversion\Entity\WorkspaceType;
diff --git a/workspace.module b/workspace.module
index 3f3c599..8e1af8a 100644
--- a/workspace.module
+++ b/workspace.module
@@ -4,7 +4,9 @@ use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
+use Drupal\Core\Link;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\Url;
 use Drupal\multiversion\Entity\WorkspaceInterface;
 
 /**
@@ -118,7 +120,7 @@ function workspace_preprocess_workspace_add_list(&$variables) {
     foreach ($variables['content'] as $type) {
       $variables['types'][$type->id()]['label'] = $type->label();
       $options = array('query' => \Drupal::request()->query->all());
-      $variables['types'][$type->id()]['url'] = \Drupal::url('entity.workspace.add_form', array('workspace_type' => $type->id()), $options);
+      $variables['types'][$type->id()]['url'] = Url::fromRoute('entity.workspace.add_form', array('workspace_type' => $type->id()), $options);
     }
   }
 }
@@ -142,8 +144,8 @@ function workspace_preprocess_workspace_rev(&$variables) {
   $title = Unicode::truncate($rev, $length, FALSE, TRUE);
 
   if (!empty($rev_info['revision_id'])) {
-    $entity_revision = \Drupal::entityManager()->getStorage($rev_info['entity_type_id'])->loadRevision($rev_info['revision_id']);
-    $variables['title'] = \Drupal::l($title, $entity_revision->urlInfo('revision'));
+    $entity_revision = \Drupal::entityTypeManager()->getStorage($rev_info['entity_type_id'])->loadRevision($rev_info['revision_id']);
+    $variables['title'] = Link::fromTextAndUrl($title, $entity_revision->toUrl('revision'));
   }
   else {
     $variables['title'] = $title;

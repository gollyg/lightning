<?php

/**
 * @file
 * Contains core functionality for the Lightning distribution.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Config\InstallStorage;
use Drupal\node\NodeTypeInterface;
use Drupal\user\Entity\Role;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function lightning_core_form_system_modules_alter(array &$form) {
  $package = 'Lightning (Experimental)';

  if (isset($form['modules'][$package])) {
    $warning = t('Here may be dragons! Please be sure you <a href="@url">understand the potential risks</a> of experimental extensions before enabling one.', [
      '@url' => 'https://www.drupal.org/core/experimental',
    ]);
    $form['modules'][$package]['#description'] = '<p>' . $warning . '</p>';
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function lightning_core_node_type_insert(NodeTypeInterface $node_type) {
  $config = \Drupal::config('lightning_core.settings')->get('content_roles');
  if (empty($config)) {
    return;
  }

  $permission_map = function ($permission) use ($node_type) {
    return str_replace('?', $node_type->id(), $permission);
  };

  foreach ($config as $key => $info) {
    if ($info['enabled']) {
      Role::create([
        'id' => $node_type->id() . '_' . $key,
        'label' => str_replace('?', $node_type->label(), $info['label']),
        'permissions' => array_map($permission_map, $info['permissions']),
      ])->save();
    }
  }

  user_role_grant_permissions('content_manager', [
    'create ' . $node_type->id() . ' content',
    'delete any ' . $node_type->id() . ' content',
    'edit any ' . $node_type->id() . ' content',
  ]);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function lightning_core_node_type_delete(NodeTypeInterface $node_type) {
  $config = \Drupal::config('lightning_core.settings')->get('content_roles');

  foreach (array_keys($config) as $key) {
    $role = Role::load($node_type->id() . '_' . $key);
    if ($role) {
      $role->delete();
    }
  }

  $role = Role::load('content_manager');
  if ($role) {
    user_role_revoke_permissions($role->id(), [
      'create ' . $node_type->id() . ' content',
      'delete any ' . $node_type->id() . ' content',
      'edit any ' . $node_type->id() . ' content',
    ]);
  }
}

/**
 * Rebuilds the service container.
 */
function lightning_core_rebuild_container() {
  require_once \Drupal::root() . '/core/includes/utility.inc';
  $class_loader = \Drupal::service('class_loader');
  $request = \Drupal::request();
  drupal_rebuild($class_loader, $request);
}

/**
 * Implements template_preprocess_block().
 */
function lightning_core_preprocess_block(array &$variables) {
  $variables['attributes']['data-block-plugin-id'] = $variables['elements']['#plugin_id'];
}

/**
 * Creates a config entity from default configuration.
 *
 * @param string $entity_type
 *   The config entity type ID.
 * @param string $id
 *   The unprefixed entity ID.
 * @param string $module
 *   (optional) The module which has the default configuration.
 */
function lightning_core_create_config($entity_type, $id, $module = 'lightning_core') {
  $values = lightning_core_read_config(
    \Drupal::entityTypeManager()->getDefinition($entity_type)->getConfigPrefix() . '.' . $id,
    $module
  );
  if ($values) {
    \Drupal::entityTypeManager()
      ->getStorage($entity_type)
      ->create($values)
      ->save();
  }
}

/**
 * Reads a stored config file from a module's config/install directory.
 *
 * @param string $id
 *   The config ID.
 * @param string $module
 *   (optional) The module to search. Defaults to 'lightning_core'.
 *
 * @return array
 *   The config data.
 */
function lightning_core_read_config($id, $module = 'lightning_core') {
  // Statically cache all FileStorage objects, keyed by module.
  static $storage = [];

  if (empty($storage[$module])) {
    $dir = \Drupal::service('module_handler')->getModule($module)->getPath();
    $storage[$module] = new FileStorage($dir . '/' . InstallStorage::CONFIG_INSTALL_DIRECTORY);
  }
  return $storage[$module]->read($id);
}
